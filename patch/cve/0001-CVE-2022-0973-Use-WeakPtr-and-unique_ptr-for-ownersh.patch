From 43739c0f7b06c12f46ed06737fa0970831d1ed44 Mon Sep 17 00:00:00 2001
From: Daniel Rubery <drubery@chromium.org>
Date: Wed, 23 Feb 2022 05:06:54 +0000
Subject: [PATCH 1/2] =?UTF-8?q?=E5=AE=89=E5=85=A8=E6=BC=8F=E6=B4=9E[CVE-20?=
 =?UTF-8?q?22-0973]=20Use=20WeakPtr=20and=20unique=5Fptr=20for=20ownership?=
 =?UTF-8?q?=20in=20ThreatDetails?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Currently we use scoped_refptr for the ThreatDetailsCacheCollector,
which holds pointers into resources owned by ThreatDetails. When the
ThreatDetails is destroyed, it's intended that the
ThreatDetailsCacheCollector is destroyed with it, but that does not
occur if there is a pending task with a reference to the
ThreatDetailsCacheCollector.

By having the ThreatDeails hold a unique_ptr, we can ensure that
destruction happens as planned.

Bug: 1297498
Change-Id: I5f14a33d56a86c271b249534ee7410f4045f4f32
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3482677
Reviewed-by: Xinghui Lu <xinghuilu@chromium.org>
Commit-Queue: Daniel Rubery <drubery@chromium.org>
Cr-Commit-Position: refs/heads/main@{#974062}
---
 .../safe_browsing/threat_details_unittest.cc  | 53 +++++++++++++++++++
 .../content/browser/threat_details.cc         |  8 ++-
 .../content/browser/threat_details.h          |  8 +--
 .../content/browser/threat_details_cache.cc   |  7 ++-
 .../content/browser/threat_details_cache.h    |  8 +--
 .../content/browser/threat_details_history.cc |  6 +--
 .../content/browser/threat_details_history.h  |  9 ++--
 7 files changed, 77 insertions(+), 22 deletions(-)
 mode change 100644 => 100755 chrome/browser/safe_browsing/threat_details_unittest.cc
 mode change 100644 => 100755 components/safe_browsing/content/browser/threat_details.h
 mode change 100644 => 100755 components/safe_browsing/content/browser/threat_details_history.h

diff --git a/chrome/browser/safe_browsing/threat_details_unittest.cc b/chrome/browser/safe_browsing/threat_details_unittest.cc
old mode 100644
new mode 100755
index 5951b48518..377771239c
--- a/chrome/browser/safe_browsing/threat_details_unittest.cc
+++ b/chrome/browser/safe_browsing/threat_details_unittest.cc
@@ -138,6 +138,13 @@ class ThreatDetailsWrap : public ThreatDetails {
     run_loop_ = nullptr;
   }
 
+  void OnRedirectionCollectionReady() override {
+    ThreatDetails::OnRedirectionCollectionReady();
+    if (should_stop_after_redirect_collection_ && run_loop_) {
+      run_loop_->Quit();
+    }
+  }
+
   // Used to synchronize ThreatDetailsDone() with WaitForThreatDetailsDone().
   // RunLoop::RunUntilIdle() is not sufficient because the MessageLoop task
   // queue completely drains at some point between the send and the wait.
@@ -150,10 +157,15 @@ class ThreatDetailsWrap : public ThreatDetails {
 
   void StartCollection() { ThreatDetails::StartCollection(); }
 
+  void SetShouldStopAfterRedirectCollection(bool should_stop) {
+    should_stop_after_redirect_collection_ = should_stop;
+  }
+
  private:
 
   base::RunLoop* run_loop_;
   size_t done_callback_count_;
+  bool should_stop_after_redirect_collection_ = false;
 };
 
 class MockSafeBrowsingUIManager : public SafeBrowsingUIManager {
@@ -1848,4 +1860,45 @@ TEST_F(ThreatDetailsTest, HistoryServiceUrls) {
   VerifyResults(actual, expected);
 }
 
+TEST_F(ThreatDetailsTest, CanCancelDuringCollection) {
+  content::WebContentsTester::For(web_contents())
+      ->NavigateAndCommit(GURL(kLandingURL));
+
+  UnsafeResource resource;
+  InitResource(SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING,
+               ThreatSource::CLIENT_SIDE_DETECTION, true /* is_subresource */,
+               GURL(kThreatURL), &resource);
+
+  auto report = std::make_unique<ThreatDetailsWrap>(
+      ui_manager_.get(), web_contents(), resource, test_shared_loader_factory_,
+      history_service(), user_population_callback(),
+      referrer_chain_provider_.get());
+  report->StartCollection();
+
+  SimulateFillCache(kThreatURL);
+
+  // The cache collection starts after the IPC from the DOM is fired.
+  std::vector<mojom::ThreatDOMDetailsNodePtr> params;
+  report->OnReceivedThreatDOMDetails(mojo::Remote<mojom::ThreatReporter>(),
+                                     main_rfh()->GetGlobalId(),
+                                     std::move(params));
+
+  // Let the cache callbacks complete.
+  base::RunLoop().RunUntilIdle();
+
+  // Let the cache collection start
+  {
+    base::RunLoop run_loop;
+    report->SetShouldStopAfterRedirectCollection(true);
+    report->SetRunLoopToQuit(&run_loop);
+    report->FinishCollection(/*did_proceed=*/true, /*num_visits=*/-1);
+    run_loop.Run();
+  }
+
+  // Cancel the collection
+  report.reset();
+
+  base::RunLoop().RunUntilIdle();
+}
+
 }  // namespace safe_browsing
diff --git a/components/safe_browsing/content/browser/threat_details.cc b/components/safe_browsing/content/browser/threat_details.cc
index 538fe2ba47..3018ac13e4 100644
--- a/components/safe_browsing/content/browser/threat_details.cc
+++ b/components/safe_browsing/content/browser/threat_details.cc
@@ -386,11 +386,11 @@ ThreatDetails::ThreatDetails(
       did_proceed_(false),
       num_visits_(0),
       trim_to_ad_tags_(trim_to_ad_tags),
-      cache_collector_(new ThreatDetailsCacheCollector),
+      cache_collector_(std::make_unique<ThreatDetailsCacheCollector>()),
       done_callback_(std::move(done_callback)),
       all_done_expected_(false),
       is_all_done_(false) {
-  redirects_collector_ = new ThreatDetailsRedirectsCollector(
+  redirects_collector_ = std::make_unique<ThreatDetailsRedirectsCollector>(
       history_service ? history_service->AsWeakPtr()
                       : base::WeakPtr<history::HistoryService>());
 }
@@ -405,9 +405,7 @@ ThreatDetails::ThreatDetails()
       all_done_expected_(false),
       is_all_done_(false) {}
 
-ThreatDetails::~ThreatDetails() {
-  DCHECK_EQ(all_done_expected_, is_all_done_);
-}
+ThreatDetails::~ThreatDetails() = default;
 
 bool ThreatDetails::IsReportableUrl(const GURL& url) const {
   // TODO(panayiotis): also skip internal urls.
diff --git a/components/safe_browsing/content/browser/threat_details.h b/components/safe_browsing/content/browser/threat_details.h
old mode 100644
new mode 100755
index 6e7edc9a4f..18fcfdfe21
--- a/components/safe_browsing/content/browser/threat_details.h
+++ b/components/safe_browsing/content/browser/threat_details.h
@@ -103,7 +103,8 @@ class ThreatDetails : public content::WebContentsObserver {
 
   void OnCacheCollectionReady();
 
-  void OnRedirectionCollectionReady();
+  // Overridden during tests
+  virtual void OnRedirectionCollectionReady();
 
   // WebContentsObserver implementation:
   void FrameDeleted(content::RenderFrameHost* render_frame_host) override;
@@ -252,10 +253,10 @@ class ThreatDetails : public content::WebContentsObserver {
   static ThreatDetailsFactory* factory_;
 
   // Used to collect details from the HTTP Cache.
-  scoped_refptr<ThreatDetailsCacheCollector> cache_collector_;
+  std::unique_ptr<ThreatDetailsCacheCollector> cache_collector_;
 
   // Used to collect redirect urls from the history service
-  scoped_refptr<ThreatDetailsRedirectsCollector> redirects_collector_;
+  std::unique_ptr<ThreatDetailsRedirectsCollector> redirects_collector_;
 
   // Callback to run when the report is finished.
   ThreatDetailsDoneCallback done_callback_;
@@ -284,6 +285,7 @@ class ThreatDetails : public content::WebContentsObserver {
   FRIEND_TEST_ALL_PREFIXES(ThreatDetailsTest, ThreatDOMDetails_MultipleFrames);
   FRIEND_TEST_ALL_PREFIXES(ThreatDetailsTest, ThreatDOMDetails_TrimToAdTags);
   FRIEND_TEST_ALL_PREFIXES(ThreatDetailsTest, ThreatDOMDetails);
+  FRIEND_TEST_ALL_PREFIXES(ThreatDetailsTest, CanCancelDuringCollection);
 
   DISALLOW_COPY_AND_ASSIGN(ThreatDetails);
 };
diff --git a/components/safe_browsing/content/browser/threat_details_cache.cc b/components/safe_browsing/content/browser/threat_details_cache.cc
index 70c5ee9278..0d9f1fea41 100644
--- a/components/safe_browsing/content/browser/threat_details_cache.cc
+++ b/components/safe_browsing/content/browser/threat_details_cache.cc
@@ -52,7 +52,8 @@ void ThreatDetailsCacheCollector::StartCacheCollection(
   // Post a task in the message loop, so the callers don't need to
   // check if we call their callback immediately.
   content::GetUIThreadTaskRunner({})->PostTask(
-      FROM_HERE, base::BindOnce(&ThreatDetailsCacheCollector::OpenEntry, this));
+      FROM_HERE, base::BindOnce(&ThreatDetailsCacheCollector::OpenEntry,
+                                weak_factory_.GetWeakPtr()));
 }
 
 bool ThreatDetailsCacheCollector::HasStarted() {
@@ -118,6 +119,7 @@ void ThreatDetailsCacheCollector::OpenEntry() {
   current_load_->DownloadToStringOfUnboundedSizeUntilCrashAndDie(
       url_loader_factory_.get(),
       base::BindOnce(&ThreatDetailsCacheCollector::OnURLLoaderComplete,
+                     // This is safe because `current_load_` is owned by `this`.
                      base::Unretained(this)));
 }
 
@@ -227,7 +229,8 @@ void ThreatDetailsCacheCollector::AdvanceEntry() {
 
   // Create a task so we don't take over the UI thread for too long.
   content::GetUIThreadTaskRunner({})->PostTask(
-      FROM_HERE, base::BindOnce(&ThreatDetailsCacheCollector::OpenEntry, this));
+      FROM_HERE, base::BindOnce(&ThreatDetailsCacheCollector::OpenEntry,
+                                weak_factory_.GetWeakPtr()));
 }
 
 void ThreatDetailsCacheCollector::AllDone(bool success) {
diff --git a/components/safe_browsing/content/browser/threat_details_cache.h b/components/safe_browsing/content/browser/threat_details_cache.h
index 834269078f..a94bc971c4 100644
--- a/components/safe_browsing/content/browser/threat_details_cache.h
+++ b/components/safe_browsing/content/browser/threat_details_cache.h
@@ -31,10 +31,10 @@ typedef std::unordered_map<
     std::unique_ptr<ClientSafeBrowsingReportRequest::Resource>>
     ResourceMap;
 
-class ThreatDetailsCacheCollector
-    : public base::RefCounted<ThreatDetailsCacheCollector> {
+class ThreatDetailsCacheCollector {
  public:
   ThreatDetailsCacheCollector();
+  ~ThreatDetailsCacheCollector();
 
   // We use |request_context_getter|, we modify |resources| and
   // |result|, and we call |callback|, so they must all remain alive
@@ -55,8 +55,6 @@ class ThreatDetailsCacheCollector
  private:
   friend class base::RefCounted<ThreatDetailsCacheCollector>;
 
-  ~ThreatDetailsCacheCollector();
-
   // Points to the url for which we are fetching the HTTP cache entry or
   // redirect chain.
   ResourceMap::iterator resources_it_;
@@ -80,6 +78,8 @@ class ThreatDetailsCacheCollector
   // The current SimpleURLLoader.
   std::unique_ptr<network::SimpleURLLoader> current_load_;
 
+  base::WeakPtrFactory<ThreatDetailsCacheCollector> weak_factory_{this};
+
   // Returns the resource from resources_ that corresponds to |url|
   ClientSafeBrowsingReportRequest::Resource* GetResource(const GURL& url);
 
diff --git a/components/safe_browsing/content/browser/threat_details_history.cc b/components/safe_browsing/content/browser/threat_details_history.cc
index 3a36327a34..c71d1555f0 100644
--- a/components/safe_browsing/content/browser/threat_details_history.cc
+++ b/components/safe_browsing/content/browser/threat_details_history.cc
@@ -42,8 +42,8 @@ void ThreatDetailsRedirectsCollector::StartHistoryCollection(
 
   content::GetUIThreadTaskRunner({})->PostTask(
       FROM_HERE,
-      base::BindOnce(&ThreatDetailsRedirectsCollector::StartGetRedirects, this,
-                     urls));
+      base::BindOnce(&ThreatDetailsRedirectsCollector::StartGetRedirects,
+                     weak_factory_.GetWeakPtr(), urls));
 }
 
 bool ThreatDetailsRedirectsCollector::HasStarted() const {
@@ -79,7 +79,7 @@ void ThreatDetailsRedirectsCollector::GetRedirects(const GURL& url) {
   history_service_->QueryRedirectsTo(
       url,
       base::BindOnce(&ThreatDetailsRedirectsCollector::OnGotQueryRedirectsTo,
-                     base::Unretained(this), url),
+                     weak_factory_.GetWeakPtr(), url),
       &request_tracker_);
 }
 
diff --git a/components/safe_browsing/content/browser/threat_details_history.h b/components/safe_browsing/content/browser/threat_details_history.h
old mode 100644
new mode 100755
index 4f76efebd5..74585088a2
--- a/components/safe_browsing/content/browser/threat_details_history.h
+++ b/components/safe_browsing/content/browser/threat_details_history.h
@@ -24,13 +24,12 @@ namespace safe_browsing {
 
 typedef std::vector<GURL> RedirectChain;
 
-class ThreatDetailsRedirectsCollector
-    : public base::RefCounted<ThreatDetailsRedirectsCollector>,
-      public history::HistoryServiceObserver {
+class ThreatDetailsRedirectsCollector : public history::HistoryServiceObserver {
  public:
   explicit ThreatDetailsRedirectsCollector(
       const base::WeakPtr<history::HistoryService>& history_service);
 
+  ~ThreatDetailsRedirectsCollector() override;
   // Collects urls' redirects chain information from the history service.
   // We get access to history service via web_contents in UI thread.
   void StartHistoryCollection(const std::vector<GURL>& urls,
@@ -49,8 +48,6 @@ class ThreatDetailsRedirectsCollector
  private:
   friend class base::RefCounted<ThreatDetailsRedirectsCollector>;
 
-  ~ThreatDetailsRedirectsCollector() override;
-
   void StartGetRedirects(const std::vector<GURL>& urls);
   void GetRedirects(const GURL& url);
   void OnGotQueryRedirectsTo(const GURL& url,
@@ -80,6 +77,8 @@ class ThreatDetailsRedirectsCollector
                           history::HistoryServiceObserver>
       history_service_observation_{this};
 
+  base::WeakPtrFactory<ThreatDetailsRedirectsCollector> weak_factory_{this};
+
   DISALLOW_COPY_AND_ASSIGN(ThreatDetailsRedirectsCollector);
 };
 
-- 
2.17.1

